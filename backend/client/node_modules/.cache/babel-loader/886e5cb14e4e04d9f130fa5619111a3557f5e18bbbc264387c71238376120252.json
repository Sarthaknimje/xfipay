{"ast":null,"code":"var _jsxFileName = \"C:\\\\proj\\\\client\\\\src\\\\components\\\\XfiStaking.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { useWallet } from '../utils/WalletContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst XfiStaking = () => {\n  _s();\n  const {\n    account,\n    provider\n  } = useWallet();\n  const [stakedAmount, setStakedAmount] = useState('0');\n  const [isPremium, setIsPremium] = useState(false);\n  const [stakeAmount, setStakeAmount] = useState('');\n  useEffect(() => {\n    if (account && provider) {\n      fetchUserData();\n    }\n  }, [account, provider]);\n  const fetchUserData = async () => {\n    try {\n      const response = await fetch(`http://localhost:5000/api/user/${account}`);\n      const userData = await response.json();\n      setStakedAmount(ethers.utils.formatEther(userData.stakedAmount));\n      setIsPremium(userData.isPremium);\n    } catch (error) {\n      console.error('Error fetching user data:', error);\n    }\n  };\n  const handleStake = async () => {\n    if (!account || !provider) {\n      alert('Please connect your wallet first');\n      return;\n    }\n    try {\n      const signer = provider.getSigner();\n      const contractABI = []; // Add the ABI of the PaymentRequest contract\n      const contractAddress = '0x...'; // Add the address of the deployed PaymentRequest contract\n      const contract = new ethers.Contract(contractAddress, contractABI, signer);\n      const xfiTokenAddress = '0x...'; // Add the address of the XFI token contract\n      const xfiTokenABI = []; // Add the ABI of the XFI token contract\n      const xfiToken = new ethers.Contract(xfiTokenAddress, xfiTokenABI, signer);\n      const amount = ethers.utils.parseEther(stakeAmount);\n\n      // Approve XFI token spending\n      const approveTx = await xfiToken.approve(contractAddress, amount);\n      await approveTx.wait();\n\n      // Stake XFI\n      const stakeTx = await contract.stake(amount);\n      await stakeTx.wait();\n      fetchUserData();\n      setStakeAmount('');\n    } catch (error) {\n      console.error('Error staking XFI:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"XFI Staking\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Staked Amount: \", stakedAmount, \" XFI\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Premium Status: \", isPremium ? 'Active' : 'Inactive']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        value: stakeAmount,\n        onChange: e => setStakeAmount(e.target.value),\n        placeholder: \"Amount to stake\",\n        className: \"w-full px-3 py-2 border rounded\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleStake,\n        className: \"w-full bg-blue-500 text-white py-2 rounded mt-2 hover:bg-blue-600\",\n        children: \"Stake XFI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(XfiStaking, \"Y/jTT5MIHVH9zKDcLIU2smD1fVM=\", false, function () {\n  return [useWallet];\n});\n_c = XfiStaking;\nexport default XfiStaking;\nvar _c;\n$RefreshReg$(_c, \"XfiStaking\");","map":{"version":3,"names":["React","useState","useEffect","ethers","useWallet","jsxDEV","_jsxDEV","XfiStaking","_s","account","provider","stakedAmount","setStakedAmount","isPremium","setIsPremium","stakeAmount","setStakeAmount","fetchUserData","response","fetch","userData","json","utils","formatEther","error","console","handleStake","alert","signer","getSigner","contractABI","contractAddress","contract","Contract","xfiTokenAddress","xfiTokenABI","xfiToken","amount","parseEther","approveTx","approve","wait","stakeTx","stake","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/proj/client/src/components/XfiStaking.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { useWallet } from '../utils/WalletContext';\r\n\r\nconst XfiStaking = () => {\r\n    const { account, provider } = useWallet();\r\n    const [stakedAmount, setStakedAmount] = useState('0');\r\n    const [isPremium, setIsPremium] = useState(false);\r\n    const [stakeAmount, setStakeAmount] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (account && provider) {\r\n            fetchUserData();\r\n        }\r\n    }, [account, provider]);\r\n\r\n    const fetchUserData = async () => {\r\n        try {\r\n            const response = await fetch(`http://localhost:5000/api/user/${account}`);\r\n            const userData = await response.json();\r\n            setStakedAmount(ethers.utils.formatEther(userData.stakedAmount));\r\n            setIsPremium(userData.isPremium);\r\n        } catch (error) {\r\n            console.error('Error fetching user data:', error);\r\n        }\r\n    };\r\n\r\n    const handleStake = async () => {\r\n        if (!account || !provider) {\r\n            alert('Please connect your wallet first');\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const signer = provider.getSigner();\r\n            const contractABI = []; // Add the ABI of the PaymentRequest contract\r\n            const contractAddress = '0x...'; // Add the address of the deployed PaymentRequest contract\r\n            const contract = new ethers.Contract(contractAddress, contractABI, signer);\r\n\r\n            const xfiTokenAddress = '0x...'; // Add the address of the XFI token contract\r\n            const xfiTokenABI = []; // Add the ABI of the XFI token contract\r\n            const xfiToken = new ethers.Contract(xfiTokenAddress, xfiTokenABI, signer);\r\n\r\n            const amount = ethers.utils.parseEther(stakeAmount);\r\n\r\n            // Approve XFI token spending\r\n            const approveTx = await xfiToken.approve(contractAddress, amount);\r\n            await approveTx.wait();\r\n\r\n            // Stake XFI\r\n            const stakeTx = await contract.stake(amount);\r\n            await stakeTx.wait();\r\n\r\n            fetchUserData();\r\n            setStakeAmount('');\r\n        } catch (error) {\r\n            console.error('Error staking XFI:', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4\">\r\n            <h3 className=\"text-xl font-bold mb-4\">XFI Staking</h3>\r\n            <p>Staked Amount: {stakedAmount} XFI</p>\r\n            <p>Premium Status: {isPremium ? 'Active' : 'Inactive'}</p>\r\n            <div className=\"mt-4\">\r\n                <input\r\n                    type=\"number\"\r\n                    value={stakeAmount}\r\n                    onChange={(e) => setStakeAmount(e.target.value)}\r\n                    placeholder=\"Amount to stake\"\r\n                    className=\"w-full px-3 py-2 border rounded\"\r\n                />\r\n                <button\r\n                    onClick={handleStake}\r\n                    className=\"w-full bg-blue-500 text-white py-2 rounded mt-2 hover:bg-blue-600\"\r\n                >\r\n                    Stake XFI\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default XfiStaking;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}