{"ast":null,"code":"var _jsxFileName = \"C:\\\\proj\\\\client\\\\src\\\\utils\\\\WalletContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WalletContext = /*#__PURE__*/createContext();\nexport const useWallet = () => {\n  _s();\n  return useContext(WalletContext);\n};\n_s(useWallet, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const WalletProvider = ({\n  children\n}) => {\n  _s2();\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const address = await signer.getAddress();\n        setAccount(address);\n        setProvider(provider);\n      } catch (error) {\n        console.error('Failed to connect wallet:', error);\n      }\n    } else {\n      alert('Please install MetaMask or a compatible wallet');\n    }\n  };\n  useEffect(() => {\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', accounts => {\n        setAccount(accounts[0] || null);\n      });\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WalletContext.Provider, {\n    value: {\n      account,\n      provider,\n      connectWallet\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s2(WalletProvider, \"SbU3J6fVKzllcYE8AWNC0h6VrNQ=\");\n_c = WalletProvider;\nvar _c;\n$RefreshReg$(_c, \"WalletProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","ethers","jsxDEV","_jsxDEV","WalletContext","useWallet","_s","WalletProvider","children","_s2","account","setAccount","provider","setProvider","connectWallet","window","ethereum","request","method","providers","Web3Provider","signer","getSigner","address","getAddress","error","console","alert","on","accounts","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/proj/client/src/utils/WalletContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\n\r\nconst WalletContext = createContext();\r\n\r\nexport const useWallet = () => useContext(WalletContext);\r\n\r\nexport const WalletProvider = ({ children }) => {\r\n  const [account, setAccount] = useState(null);\r\n  const [provider, setProvider] = useState(null);\r\n\r\n  const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n        const signer = provider.getSigner();\r\n        const address = await signer.getAddress();\r\n        setAccount(address);\r\n        setProvider(provider);\r\n      } catch (error) {\r\n        console.error('Failed to connect wallet:', error);\r\n      }\r\n    } else {\r\n      alert('Please install MetaMask or a compatible wallet');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (window.ethereum) {\r\n      window.ethereum.on('accountsChanged', (accounts) => {\r\n        setAccount(accounts[0] || null);\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <WalletContext.Provider value={{ account, provider, connectWallet }}>\r\n      {children}\r\n    </WalletContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,aAAa,gBAAGP,aAAa,CAAC,CAAC;AAErC,OAAO,MAAMQ,SAAS,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,aAAa,CAAC;AAAA;AAACE,EAAA,CAA5CD,SAAS;AAEtB,OAAO,MAAME,cAAc,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC9C,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMgB,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAIC,MAAM,CAACC,QAAQ,EAAE;MACnB,IAAI;QACF,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;UAAEC,MAAM,EAAE;QAAsB,CAAC,CAAC;QAChE,MAAMN,QAAQ,GAAG,IAAIX,MAAM,CAACkB,SAAS,CAACC,YAAY,CAACL,MAAM,CAACC,QAAQ,CAAC;QACnE,MAAMK,MAAM,GAAGT,QAAQ,CAACU,SAAS,CAAC,CAAC;QACnC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACG,UAAU,CAAC,CAAC;QACzCb,UAAU,CAACY,OAAO,CAAC;QACnBV,WAAW,CAACD,QAAQ,CAAC;MACvB,CAAC,CAAC,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF,CAAC,MAAM;MACLE,KAAK,CAAC,gDAAgD,CAAC;IACzD;EACF,CAAC;EAED3B,SAAS,CAAC,MAAM;IACd,IAAIe,MAAM,CAACC,QAAQ,EAAE;MACnBD,MAAM,CAACC,QAAQ,CAACY,EAAE,CAAC,iBAAiB,EAAGC,QAAQ,IAAK;QAClDlB,UAAU,CAACkB,QAAQ,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;MACjC,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE1B,OAAA,CAACC,aAAa,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAErB,OAAO;MAAEE,QAAQ;MAAEE;IAAc,CAAE;IAAAN,QAAA,EACjEA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAAC1B,GAAA,CAlCWF,cAAc;AAAA6B,EAAA,GAAd7B,cAAc;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}